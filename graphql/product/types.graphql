type Brand @model(class: "App\\Models\\Brand") {
    id: ID! @globalId
    name: String!
    model: Model! @hasMany
    created_at: DateTime! @rename(attribute: "created_at")
    updated_at: DateTime! @rename(attribute: "updated_at")
}

type Model @model(class: "App\\Models\\Model") {
    id: ID! @globalId
    modelName: String! @rename(attribute: "model_name")
    brand: Brand! @belongsTo
    product: Product! @hasOne
    created_at: DateTime! @rename(attribute: "created_at")
    updated_at: DateTime! @rename(attribute: "updated_at")
}

type Price @model(class: "App\\Models\\Price") {
    id: ID! @globalId
    price: Float!
    product: Product! @belongsTo
    created_at: DateTime! @rename(attribute: "created_at")
    updated_at: DateTime! @rename(attribute: "updated_at")
}

type Category @model(class: "App\\Models\\Category") {
    id: ID! @globalId
    name: String!
    products: [Product!]! @hasMany(type: CONNECTION)
    created_at: DateTime! @rename(attribute: "created_at")
    updated_at: DateTime! @rename(attribute: "updated_at")
}

type Discount @model(class: "App\\Models\\Discount") {
    id: ID! @globalId
    code: String!
    name: String!
    startAt: DateTime! @rename(attribute: "start_At")
    endAt: DateTime! @rename(attribute: "end_at")
    product: Product! @belongsTo
    createdAt: DateTime! @rename(attribute: "created_at")
    updatedAt: DateTime! @rename(attribute: "updated_at")
}

type Attributes {
    id: ID! @globalId
    product: Product @belongsTo
    storage: Float
    weight: Float
    size: Float
    createdAt: DateTime! @rename(attribute: "created_at")
    updatedAt: DateTime! @rename(attribute: "updated_at")
}

type Color {
    id: ID! @globalId
    name: String
    product: Product @belongsTo
    createdAt: DateTime! @rename(attribute: "created_at")
    updatedAt: DateTime! @rename(attribute: "updated_at")
}

type Product @model(class: "App\\Models\\Product") {
    id: ID! @globalId
    name: String!
    description: String!
    currentPrice: Float @field(resolver: "App\\GraphQL\\Product\\CurrentPriceResolver")
    discount: Discount @hasOne
    model: Model! @belongsTo
    status: ProductStatus
    currentStock: Int @field(resolver: "App\\GraphQL\\Product\\CurrentStockResolver")
    image: Image
    @with(relation: "media")
    @field(resolver: "App\\GraphQL\\Product\\Types\\ProductImage")
    attributes: Attributes! @hasOne
    prices: [Price!]! @hasMany
    color: Color! @hasOne
    category: Category! @belongsTo
    productDetails: [ProductDetail]! @hasMany
    createdAt: DateTime! @rename(attribute: "created_at")
    updatedAt: DateTime! @rename(attribute: "updated_at")
}

type ProductCreatePayload {
    productEdge: ProductEdge
    userErrors: [UserError]
}

type ProductUpdatePayload {
    product: Product
    userErrors: [UserError]
}
